name: Jira QA
on:
  issue_comment:
    types: [created]
  workflow_dispatch:
env:
  JIRA_QA_STATUS_FIELD_TITLE: QA Status
  JIRA_QA_STATUS_REQUESTED: Requested
  JIRA_QA_STATUS_APPROVED: Approved
  JIRA_QA_STATUS_REJECTED: Rejected
jobs:
  jira:
    name: Derive Pull Request Title
    if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/qa') 
    runs-on: ubuntu-latest
    outputs:
      issue_key: ${{ steps.jirakey.outputs.issue }}
      field: ${{ steps.field.outputs.id }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_pull_request
        with:
          route: GET /repos/{repository}/pulls/{pull_number}
          repository: ${{ github.repository }}
          pull_number: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Jira
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      - name: Find Jira issue key
        id: jirakey
        uses: atlassian/gajira-find-issue-key@master
        with:
          string: ${{ fromJson(steps.get_pull_request.outputs.data).title }}
          from: ""
      - name: Get QA Status Field
        id: field
        run: |
          if [ "${{ steps.jirakey.outputs.issue }}" == "" ]
          then
            echo "Issue key not found"
            exit 1
          fi
          echo "Searching for '$JIRA_QA_STATUS_FIELD_TITLE' Jira field"
          fieldID=$(curl ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.jirakey.outputs.issue }}/editmeta \
            --user ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} \
            -H "Content-Type: application/json" \
            -X GET \
            | jq -c ".fields | .[] | select(.name == \"$JIRA_QA_STATUS_FIELD_TITLE\") | .key" \
            | tr -d '"')
          
          if [ "$fieldID" == "" ]
          then
            echo "Field ID not found"
            exit 1
          fi
          echo "Found field '$fieldID'"
          
          echo "::set-output name=id::$fieldID"
        
  request_review:
    name: Set QA Status
    if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/qa request')
    runs-on: ubuntu-latest
    needs: jira
    steps:
      - name: Set Jira Issue Field
        run: |
            out=$(curl ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ needs.jira.outputs.issue_key }} \
              --user ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} \
              -H "Content-Type: application/json" \
              -X PUT \
              -d "{ \"fields\": {\"${{ needs.jira.outputs.field }}\": {\"value\": \"$JIRA_QA_STATUS_REQUESTED\"}} }")
            if [ "$out" != "" ]
            then
              echo "There was an error: $out"
              exit 1
            fi
      - name: Set Github Status
        uses: coingate/status-check-action@master
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          state: pending
          check_name: QA Status

  qa_status:
    name: QA Status
    if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/qa check')
    runs-on: ubuntu-latest
    needs: jira
    steps:
      - name: Get Jira Issue Field
        id: status
        run: |
            status=$(curl ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ needs.jira.outputs.issue_key }} \
              --user ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} \
              -H "Content-Type: application/json" \
              -X GET \
              | jq .fields.${{ needs.jira.outputs.field }}.value \
              | tr -d '"')
            
            echo "Jira returned '$status' status"
            
            if [ "$status" == "$JIRA_QA_STATUS_REJECTED" ]
            then
              echo "::set-output name=state::failure"
            elif [ "$status" == $JIRA_QA_STATUS_APPROVED ]
            then
              echo "::set-output name=state::success"
            else
              echo "::set-output name=state::pending"
            fi
      - name: Set Github Status
        uses: coingate/status-check-action@master
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          state: ${{ steps.status.outputs.state }}
          check_name: QA Status
